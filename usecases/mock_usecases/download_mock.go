// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/download.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/sukimoyoi/chi-go-otoshi/entities"
	io "io"
	reflect "reflect"
)

// MockDownloadInterface is a mock of DownloadInterface interface
type MockDownloadInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadInterfaceMockRecorder
}

// MockDownloadInterfaceMockRecorder is the mock recorder for MockDownloadInterface
type MockDownloadInterfaceMockRecorder struct {
	mock *MockDownloadInterface
}

// NewMockDownloadInterface creates a new mock instance
func NewMockDownloadInterface(ctrl *gomock.Controller) *MockDownloadInterface {
	mock := &MockDownloadInterface{ctrl: ctrl}
	mock.recorder = &MockDownloadInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloadInterface) EXPECT() *MockDownloadInterfaceMockRecorder {
	return m.recorder
}

// Singularly mocks base method
func (m *MockDownloadInterface) Singularly(page entities.WebPage, saveRootDirectory string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Singularly", page, saveRootDirectory)
	ret0, _ := ret[0].(error)
	return ret0
}

// Singularly indicates an expected call of Singularly
func (mr *MockDownloadInterfaceMockRecorder) Singularly(page, saveRootDirectory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Singularly", reflect.TypeOf((*MockDownloadInterface)(nil).Singularly), page, saveRootDirectory)
}

// Regularly mocks base method
func (m *MockDownloadInterface) Regularly(targetTitles []string, saveRootDirectory string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Regularly", targetTitles, saveRootDirectory)
	ret0, _ := ret[0].(error)
	return ret0
}

// Regularly indicates an expected call of Regularly
func (mr *MockDownloadInterfaceMockRecorder) Regularly(targetTitles, saveRootDirectory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Regularly", reflect.TypeOf((*MockDownloadInterface)(nil).Regularly), targetTitles, saveRootDirectory)
}

// MockSaveRepository is a mock of SaveRepository interface
type MockSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSaveRepositoryMockRecorder
}

// MockSaveRepositoryMockRecorder is the mock recorder for MockSaveRepository
type MockSaveRepositoryMockRecorder struct {
	mock *MockSaveRepository
}

// NewMockSaveRepository creates a new mock instance
func NewMockSaveRepository(ctrl *gomock.Controller) *MockSaveRepository {
	mock := &MockSaveRepository{ctrl: ctrl}
	mock.recorder = &MockSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSaveRepository) EXPECT() *MockSaveRepositoryMockRecorder {
	return m.recorder
}

// CreateFolder mocks base method
func (m *MockSaveRepository) CreateFolder(folderPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", folderPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFolder indicates an expected call of CreateFolder
func (mr *MockSaveRepositoryMockRecorder) CreateFolder(folderPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockSaveRepository)(nil).CreateFolder), folderPath)
}

// CreateNumberedFolder mocks base method
func (m *MockSaveRepository) CreateNumberedFolder(folderParentPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNumberedFolder", folderParentPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNumberedFolder indicates an expected call of CreateNumberedFolder
func (mr *MockSaveRepositoryMockRecorder) CreateNumberedFolder(folderParentPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNumberedFolder", reflect.TypeOf((*MockSaveRepository)(nil).CreateNumberedFolder), folderParentPath)
}

// SaveFileReader mocks base method
func (m *MockSaveRepository) SaveFileReader(filePath string, r io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFileReader", filePath, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFileReader indicates an expected call of SaveFileReader
func (mr *MockSaveRepositoryMockRecorder) SaveFileReader(filePath, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFileReader", reflect.TypeOf((*MockSaveRepository)(nil).SaveFileReader), filePath, r)
}

// MockCacheRepository is a mock of CacheRepository interface
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockCacheRepository) Load() (*entities.CacheData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*entities.CacheData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockCacheRepositoryMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCacheRepository)(nil).Load))
}

// Save mocks base method
func (m *MockCacheRepository) Save(arg0 *entities.CacheData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockCacheRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCacheRepository)(nil).Save), arg0)
}
